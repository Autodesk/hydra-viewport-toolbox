name: Reusable Build Workflow

on:
  workflow_call:
    secrets:
      GH_PACKAGES_TOKEN:
        required: true
    inputs:
      os:
        required: true
        type: string
      build_type:
        required: true
        type: string

jobs:
  build:
    name: ${{ inputs.os }} - ${{ inputs.build_type }}
    runs-on: ${{ inputs.os }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        lfs: true
        submodules: recursive
        fetch-depth: 0

    - name: Install required dependencies (Linux only)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y libxmu-dev libxi-dev libgl-dev libxrandr-dev libxinerama-dev libxcursor-dev mono-complete

    - name: Setup Virtual GPU for Testing (Linux only)
      if: runner.os == 'Linux'
      run: |
        echo "=== Setting up Linux Software Rendering ==="
        
        # Set up Xvfb (virtual display)
        sudo apt-get update
        sudo apt-get install -y xvfb mesa-utils libgl1-mesa-dri
        
        # Start Xvfb
        Xvfb :99 -screen 0 1024x768x24 &
        export DISPLAY=:99
        echo "DISPLAY=:99" >> $GITHUB_ENV
        
        # Force software rendering
        echo "LIBGL_ALWAYS_SOFTWARE=1" >> $GITHUB_ENV
        echo "GALLIUM_DRIVER=llvmpipe" >> $GITHUB_ENV

    - name: Install required dependencies (MacOS only)
      if: runner.os == 'macOS'
      run: brew install mono

    - name: Setup compiler environment (Windows only)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Setup vcpkg caching via GitHub Packages
      uses: ./.github/actions/setup-vcpkg-cache
      with:
        os: ${{ runner.os }}
        gh-packages-token: ${{ secrets.GH_PACKAGES_TOKEN }}

    - name: Configure
      run: cmake --preset ${{ inputs.build_type }}

    - name: Build
      run: cmake --build --preset ${{ inputs.build_type }}

    - name: Test 
      if: runner.os == 'Linux'
      run: ctest --preset ${{ inputs.build_type }} --output-on-failure

    - name: Upload vcpkg failure logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-build-logs-${{ runner.os }}-${{ inputs.build_type }}
        path: externals/vcpkg/buildtrees