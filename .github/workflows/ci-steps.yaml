name: Reusable Build Workflow

on:
  workflow_call:
    secrets:
      GH_PACKAGES_TOKEN:
        required: true
    inputs:
      runner:
        required: false
        type: string
        default: linux
        description: 'Runner type (linux, windows, mac, gpu)'
      build_type:
        required: false
        type: string
        default: release
      enable_tests:
        required: false
        type: boolean
        default: false
      pr_number:
        required: false
        type: string
        description: 'PR number to checkout (optional)'

jobs:
  build:
    name: ${{ inputs.runner }} - ${{ inputs.build_type }}
    runs-on: ${{ inputs.runner == 'linux' && 'ubuntu-24.04' || inputs.runner == 'windows' && 'windows-2022' || inputs.runner == 'mac' && 'macos-14' || inputs.runner == 'gpu' && 'self-hosted' || 'ubuntu-24.04' }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        lfs: true
        submodules: recursive
        fetch-depth: 0
        clean: true  # Clean untracked files if any
        ref: ${{ inputs.pr_number && format('refs/pull/{0}/head', inputs.pr_number) || github.ref }}

    - name: Install required dependencies (Linux only)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y libxmu-dev libxi-dev libgl-dev libxrandr-dev libxinerama-dev libxcursor-dev mono-complete

    - name: Install required dependencies (MacOS only)
      if: runner.os == 'macOS'
      run: brew install mono

    - name: Setup compiler environment (Windows only)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Setup vcpkg caching via GitHub Packages
      uses: ./.github/actions/setup-vcpkg-cache
      with:
        os: ${{ runner.os }}
        gh-packages-token: ${{ secrets.GH_PACKAGES_TOKEN }}

    - name: Configure
      run: cmake --preset ${{ inputs.build_type }}

    - name: Build
      run: cmake --build --preset ${{ inputs.build_type }}

    - name: Test (GPU-enabled)
      if: inputs.enable_tests && inputs.runner == 'gpu'
      run: |
        # Setup X11 display directly in test step
        if ! pgrep -f "X :99" > /dev/null; then
          sudo X :99 -config /etc/X11/xorg.conf > /dev/null 2>&1 &
          sleep 5
        fi
        export DISPLAY=:99
        
        # Set library path for USD dependencies
        export LD_LIBRARY_PATH="$PWD/build/${{ inputs.build_type }}/vcpkg_installed/x64-linux-hvt/lib:$LD_LIBRARY_PATH"
        
        # Verify GPU setup
        echo "GPU Info:"
        nvidia-smi --query-gpu=name,driver_version,memory.total --format=csv,noheader
        echo "OpenGL Renderer:"
        glxinfo | grep -E "(OpenGL version|OpenGL renderer)"
        
        # Run the tests
        ctest --preset ${{ inputs.build_type }} --output-on-failure

    - name: Upload vcpkg failure logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-build-logs
        path: externals/vcpkg/buildtrees
