-- glslfx version 0.1

// Copyright 2025 Autodesk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

--- --------------------------------------------------------------------------
-- glsl Utilities::Random

// Math constants.
#define M_PI 3.1415926535897932384626433832795

// Choose a random number generator:
// - LCG: A pseudorandom LCG (linear congruential generator) to generate independent random numbers.
// - PCG2D: A pseudorandom version of PCG (permuted congruential generator) to generate two
//   distributed random numbers.
//#define USE_RNG_LCG
#define USE_RNG_PCG2D

// Define initRand() and random2D() functions based on the chosen random number generator.
// NOTE: random2D()) generates two uniformly distributed numbers in the range [0.0, 1.0), using the
// specified random number generator. The two numbers may be correlated to provide an even
// distribution across the 2D range, which is why this is a single 2D function instead of having two
// calls to a 1D function.
#if defined(USE_RNG_LCG)
#define initRand lcgInit
#define random2D lcgNext2D
#endif
#if defined(USE_RNG_PCG2D)
#define initRand pcg2DInit
#define random2D pcg2DNext2D
#endif

// State used for random number generation (RNG).
struct Random
{
    uvec2 state;
};

// Global random number generator.
Random gRNG;

// Generates a random 32-bit integer from two seed values, with the Tiny Encryption Algorithm (TEA).
// NOTE: Based on
// https://github.com/nvpro-samples/vk_raytracing_tutorial_KHR/tree/master/ray_tracing_jitter_cam
uint tea(uint val0, uint val1)
{
    uint v0 = val0;
    uint v1 = val1;
    uint s0 = 0u;

    for (uint n = 0u; n < 16u; n++)
    {
        s0 += 0x9e3779b9u;
        v0 += ((v1 << 4) + 0xa341316cu) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4u);
        v1 += ((v0 << 4) + 0xad90777du) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761eu);
    }

    return v0;
}

// Generates a random 32-bit integer from a seed value, using a linear congruential generator (LCG).
// NOTE: Based on "Hash Functions for GPU Rendering" @ http://www.jcgt.org/published/0009/03/02.
uint lcg(uint p)
{
    return p * 1664525u + 1013904223u;
}

// Initializes the random number generator for LCG.
void lcgInit(uint sampleIndex, uvec2 screenSize, uvec2 location)
{
    // Compute a random integer as a seed for LCG, because LCG does not behave well with consecutive
    // seeds. This is based on the pixel index and sample index, to prevent correlation across space
    // and time.
    uint pixelIndex = location.y * screenSize.x + location.x;
    gRNG.state.x     = tea(pixelIndex, sampleIndex);
}

// Computes the next LCG value, updating the specified state value.
float lcgNext()
{
    // Use the lower 24 bits of an LCG result, with the RNG as a seed.
    gRNG.state.x = lcg(gRNG.state.x) & 0x00FFFFFFu;

    // Produce a floating-point number in the range [0.0, 1.0), from the 24-bit state.
    return float(gRNG.state.x) / float(0x01000000u);
}

// Computes the next LCG value pair, updating the specified RNG.
vec2 lcgNext2D()
{
    return vec2(lcgNext(), lcgNext());
}

// Initializes the random number generator for PCG2D.
void pcg2DInit(uint sampleIndex, uvec2 screenSize, uvec2 location)
{
    // Initialize the state based on the pixel location and sample index, to prevent correlation
    // across space and time.
    // NOTE: Unlike LCG, PCG2D does behave well with consecutive seeds, so the seed does not need to
    // be scrambled. See https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering.
    gRNG.state.x = location.y * screenSize.x + location.x;
    gRNG.state.y = sampleIndex;
}

// Generates two random 32-bit integers from seed values, using a two-dimensional permuted
// congruential generator (PCG).
// NOTE: Based on "Hash Functions for GPU Rendering" @ http://www.jcgt.org/published/0009/03/02.
uvec2 pcg2D(uvec2 v)
{
    v   = v * 1664525u + 1013904223u;
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;
    v   = v ^ (v >> 16u);
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;
    v   = v ^ (v >> 16u);

    return v;
}

// Computes the next PCG2D value pair, updating the specified RNG.
vec2 pcg2DNext2D()
{
    gRNG.state = pcg2D(gRNG.state);

    // Produce floating-point numbers in the range [0.0, 1.0).
    return vec2(gRNG.state) / float(0xFFFFFFFFu);
}

// Computes a simple scalar hash based on a screen-space location.
int hash(ivec2 location)
{
    // NOTE: Parentheses added to emphasize default operator precedence.
    return ((3 * location.x) ^ (location.y + location.x * location.y)) * 10;
}

// Generates a uniformly distributed random point on a disk with the specified radius.
// NOTE: See "Ray Tracing Gems" section 16.5 for details.
vec2 sampleDisk(vec2 random, float radius)
{
    float r   = radius * sqrt(random[0]);
    float phi = 2.0f * M_PI * random[1];

    return r * vec2(cos(phi), sin(phi));
}
