-- glslfx version 0.1

// Copyright 2025 Autodesk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

-- configuration
{
    "techniques": {
        "default": {
            "FXAA::Fragment": {
                "source": [ "FXAA.Fragment" ]
            }
        }
    }
}

-- glsl FXAA.Fragment

#define FXAA_EDGE_SHARPNESS (8.0)
#define FXAA_EDGE_THRESHOLD (0.125)
#define FXAA_EDGE_THRESHOLD_MIN (0.05)
#define FXAA_RCP_FRAME_OPT (0.50)
#define FXAA_RCP_FRAME_OPT2 (2.0)

float FxaaLuma(vec3 rgb) 
{
    return dot(rgb, vec3(0.299, 0.587, 0.114));
}

// Implement a version of FXAA antialiasing.
// https://en.wikipedia.org/wiki/Fast_approximate_anti-aliasing
//
void main(void)
{
    // Sample current and neighboring pixels luminance in axis aligned space.
    vec4 extent;
    extent.xy = uvOut + vec2(-0.5, -0.5) * uResolution;
    extent.zw = uvOut + vec2( 0.5,  0.5) * uResolution;
    float lumaNw = FxaaLuma(HgiGet_colorIn(extent.xy).rgb);
    float lumaSw = FxaaLuma(HgiGet_colorIn(extent.xw).rgb);
    float lumaNe = FxaaLuma(HgiGet_colorIn(extent.zy).rgb) + 1.0/384.0;
    float lumaSe = FxaaLuma(HgiGet_colorIn(extent.zw).rgb);
    vec4 rgbaM = HgiGet_colorIn(uvOut);    
   
    float lumaM = FxaaLuma(rgbaM.rgb);
    
    // Compute Local contrast.
    float lumaMax = max(max(lumaNe, lumaSe), max(lumaNw, lumaSw));
    float lumaMin = min(min(lumaNe, lumaSe), min(lumaNw, lumaSw));
    float lumaMaxSubMinM = max(lumaMax, lumaM) - min(lumaMin, lumaM);
    float lumaMaxScaledClamped = max(FXAA_EDGE_THRESHOLD_MIN, lumaMax * FXAA_EDGE_THRESHOLD);

    // No antialising required if contrast is below threshold.
    if (lumaMaxSubMinM < lumaMaxScaledClamped) 
    {
        hd_FragColor = rgbaM;
        return;
    }

    // Sample neighboring pixels along maximum gradient direction.
    float dirSwMinusNe = lumaSw - lumaNe;
    float dirSeMinusNw = lumaSe - lumaNw;
    vec2 dir1 = normalize(vec2(dirSwMinusNe + dirSeMinusNw, dirSwMinusNe - dirSeMinusNw));
    vec3 rgbN1 = HgiGet_colorIn(uvOut.xy - dir1 * FXAA_RCP_FRAME_OPT*uResolution).rgb;
    vec3 rgbP1 = HgiGet_colorIn(uvOut.xy + dir1 * FXAA_RCP_FRAME_OPT*uResolution).rgb;

    float dirAbsMinTimesC = min(abs(dir1.x), abs(dir1.y)) * FXAA_EDGE_SHARPNESS;
    vec2 dir2 = clamp(dir1.xy / dirAbsMinTimesC, -2.0, 2.0);
    vec3 rgbN2 = HgiGet_colorIn(uvOut.xy - dir2 * FXAA_RCP_FRAME_OPT2*uResolution).rgb;
    vec3 rgbP2 = HgiGet_colorIn(uvOut.xy + dir2 * FXAA_RCP_FRAME_OPT2*uResolution).rgb;

    // Compute final blended color of current pixel.
    vec3 rgbA = rgbN1 + rgbP1;
    vec3 rgbB = ((rgbN2 + rgbP2) * 0.25) + (rgbA * 0.25);

    float lumaB = FxaaLuma(rgbB);
    float alpha = rgbaM.a; // leave alpha unchanged
    if ((lumaB < lumaMin) || (lumaB > lumaMax))
    {
        hd_FragColor = vec4(rgbA * 0.5, alpha);
    }
    else
    {
        hd_FragColor = vec4(rgbB, alpha);
    }
}
