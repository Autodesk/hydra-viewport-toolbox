#usda 1.0
(
    defaultPrim = "moveManipulator"
    upAxis = "Y"
)

def Material "ManipulatorMaterial"
{
    token outputs:surface.connect = </ManipulatorMaterial/Surface.outputs:surface>

    def Shader "Surface"
    {
        uniform token info:implementationSource = "sourceAsset"
        uniform asset info:glslfx:sourceAsset = @manipulatorShader.glslfx@
        token outputs:surface
    }
}

def Material "SectionPlaneMaterial"
{
    token outputs:surface.connect = </SectionPlaneMaterial/Surface.outputs:surface>

    def Shader "Surface"
    {
        uniform token info:implementationSource = "sourceAsset"
        uniform asset info:glslfx:sourceAsset = @planeShader.glslfx@
        token outputs:surface
    }
}

class "__class"
{
    def Cone "baseArrow"
    {
        double radius = 0.25
        double height = 1.0
    }
    def Cylinder "baseAxis"
    {
        double radius = 0.06
        double height = 4.0
    }
    def Plane "basePlane"
    {
        double length = 1.0
        double width = 1.0
    }
    def Mesh "baseRotationHandle" (
        prepend references=@rotationHandleMesh.usda@
    )
    {
    }
}

def Xform "moveManipulator"
{
    float3 xformOp:translate = (1, 1, 1)
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )

    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:transform"]

    def Xform "manipulatorParts"
    {
        token constrainedXformOp:constrainScale = "scale"
        double constrainedXformOp:constrainScale:baseSize = 1.0 # size in object space that is scaled to match `scaleSize` in the designated space
        double constrainedXformOp:constrainScale:scaleSize = 0.05 # size in clip space ("ndc" mode) this example
        token constrainedXformOp:constrainScale:scaleSizeSpace = "ndc" # "screen", "view", "ndc"
        double3 constrainedXformOp:constrainScale:pivot = (0.0, 0.0, 0.0) # center position of the scaling in object space

        uniform token[] xformOpOrder = ["constrainedXformOp:constrainScale"]

        # def Xform "origin"
        # {
        #     def Sphere "point"
        #     {
        #         double radius = 0.2
        #         color3f[] primvars:displayColor = [(0.8, 0.8, 0.8)]
        #     }
        # }

        def Xform "xAxis"
        {
            def "arrow" (prepend specializes = </__class/baseArrow>; prepend apiSchemas = ["MaterialBindingAPI"])
            {
                rel material:binding = </ManipulatorMaterial>
                color3f[] primvars:displayColor = [(1, 0, 0)]

                float xformOp:rotateY = 90.0
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (4, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateY", "xformOp:scale"]
            }

            def "axis" (prepend specializes = </__class/baseAxis>; prepend apiSchemas = ["MaterialBindingAPI"])
            {
                token axis = "X"
                rel material:binding = </ManipulatorMaterial>
                color3f[] primvars:displayColor = [(0.8, 0, 0)]

                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (2, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            }
        }
        def Xform "yAxis"
        {
            def "arrow" (prepend specializes = </__class/baseArrow>; prepend apiSchemas = ["MaterialBindingAPI"])
            {
                rel material:binding = </ManipulatorMaterial>
                color3f[] primvars:displayColor = [(0, 1, 0)]

                float xformOp:rotateX = -90.0
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 4, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]
            }
            def "axis" (prepend specializes = </__class/baseAxis>; prepend apiSchemas = ["MaterialBindingAPI"])
            {
                token axis = "Y"
                rel material:binding = </ManipulatorMaterial>
                color3f[] primvars:displayColor = [(0, 0.8, 0)]

                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 2, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            }
        }
        def Xform "zAxis"
        {
            def "arrow" (prepend specializes = </__class/baseArrow>; prepend apiSchemas = ["MaterialBindingAPI"])
            {
                rel material:binding = </ManipulatorMaterial>
            color3f[] primvars:displayColor = [(0, 0, 1)]

                float xformOp:rotateZ = 0.0
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 4)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZ", "xformOp:scale"]
            }
            def "axis" (prepend specializes = </__class/baseAxis>; prepend apiSchemas = ["MaterialBindingAPI"])
            {
                token axis = "Z"
                rel material:binding = </ManipulatorMaterial>
                color3f[] primvars:displayColor = [(0, 0, 0.8)]

                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 2)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            }
        }

        def Xform "xyPlane"
        {
            def "plane" (prepend specializes = </__class/basePlane>; prepend apiSchemas = ["MaterialBindingAPI"])
            {
                token axis = "Z"
                rel material:binding = </ManipulatorMaterial>
                color3f[] primvars:displayColor = [(1, 1, 0)]

                float3 xformOp:translate = (0.8, 0.8, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }
        }
        def Xform "yzPlane"
        {
            def "plane" (prepend specializes = </__class/basePlane>; prepend apiSchemas = ["MaterialBindingAPI"])
            {
                token axis = "X"
                rel material:binding = </ManipulatorMaterial>
                color3f[] primvars:displayColor = [(0, 1, 1)]

                float3 xformOp:translate = (0, 0.8, 0.8)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }
        }
        def Xform "zxPlane"
        {
            def "plane" (prepend specializes = </__class/basePlane>; prepend apiSchemas = ["MaterialBindingAPI"])
            {
                token axis = "Y"
                rel material:binding = </ManipulatorMaterial>
                color3f[] primvars:displayColor = [(1, 0, 1)]

                float3 xformOp:translate = (0.8, 0, 0.8)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }
        }
        def Xform "xRotation"
        {
            def "ring" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend specializes = </__class/baseRotationHandle>
            )
            {
                token axis = "X"
                rel material:binding = </ManipulatorMaterial>
                color3f[] primvars:displayColor = [(0.9, 0.2, 0.2)]
                float xformOp:rotateY = 270
                float3 xformOp:scale = (3, 3, 3)
                uniform token[] xformOpOrder = ["xformOp:rotateY", "xformOp:scale"]
            }
        }
        def Xform "yRotation"
        {
            def "ring" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend specializes = </__class/baseRotationHandle>
            )
            {
                token axis = "Y"
                rel material:binding = </ManipulatorMaterial>
                color3f[] primvars:displayColor = [(0.2, 0.9, 0.2)]
                float xformOp:rotateX = 90
                float3 xformOp:scale = (3, 3, 3)
                uniform token[] xformOpOrder = ["xformOp:rotateX", "xformOp:scale"]
            }
        }
        def Xform "zRotation"
        {
            def "ring" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend specializes = </__class/baseRotationHandle>
            )
            {
                token axis = "Z"
                rel material:binding = </ManipulatorMaterial>
                color3f[] primvars:displayColor = [(0.2, 0.2, 0.9)]
                float xformOp:rotateX = 0
                float3 xformOp:scale = (3, 3, 3)
                uniform token[] xformOpOrder = ["xformOp:rotateX", "xformOp:scale"]
            }
        }
    }
    def Xform "sectionPlane"
    {
        def "plane" (prepend specializes = </__class/basePlane>; prepend apiSchemas = ["MaterialBindingAPI"])
        {
            token axis = "Y"
            rel material:binding = </SectionPlaneMaterial>
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [0.075]
            bool primvars:doubleSided = true

            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }
    }
}
