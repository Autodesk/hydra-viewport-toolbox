#usda 1.0
(
    defaultPrim = "moveManipulator"
    upAxis = "Y"
)

class "__class"
{
    def Cone "baseArrow"
    {
        double radius = 0.25
        double height = 1.0
    }
    def Cylinder "baseAxis"
    {
        double radius = 0.06
        double height = 4.0
    }
    def Plane "basePlane"
    {
        double length = 1.0
        double width = 1.0
    }
}

def Xform "moveManipulator"
{
    float3 xformOp:translate = (1, 1, 1)

    token constrainedXformOp:constrainScale = "scale"
    double constrainedXformOp:constrainScale:baseSize = 1.0 # size in object space that is scaled to match `scaleSize` in the designated space
    double constrainedXformOp:constrainScale:scaleSize = 0.05 # size in clip space ("ndc" mode) this example
    token constrainedXformOp:constrainScale:scaleSizeSpace = "ndc" # "screen", "view", "ndc"
    double3 constrainedXformOp:constrainScale:pivot = (0.0, 0.0, 0.0) # center position of the scaling in object space

    uniform token[] xformOpOrder = ["xformOp:translate", "constrainedXformOp:constrainScale"]

    # def Xform "origin"
    # {
    #     def Sphere "point"
    #     {
    #         double radius = 0.2
    #         color3f[] primvars:displayColor = [(0.8, 0.8, 0.8)]
    #     }
    # }

    def Xform "xAxis"
    {
        def "arrow" (prepend specializes = </__class/baseArrow>)
        {
            color3f[] primvars:displayColor = [(1, 0, 0)]

            float xformOp:rotateY = 90.0
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (4, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateY", "xformOp:scale"]
        }

        def "axis" (prepend specializes = </__class/baseAxis>)
        {
            token axis = "X"
            color3f[] primvars:displayColor = [(0.8, 0, 0)]

            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (2, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }
    }
    def Xform "yAxis"
    {
        def "arrow" (prepend specializes = </__class/baseArrow>)
        {
            color3f[] primvars:displayColor = [(0, 1, 0)]

            float xformOp:rotateX = -90.0
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 4, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]
        }
        def "axis" (prepend specializes = </__class/baseAxis>)
        {
            token axis = "Y"
            color3f[] primvars:displayColor = [(0, 0.8, 0)]

            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 2, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }
    }
    def Xform "zAxis"
    {
        def "arrow" (prepend specializes = </__class/baseArrow>)
        {
            color3f[] primvars:displayColor = [(0, 0, 1)]

            float xformOp:rotateZ = 0.0
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 4)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZ", "xformOp:scale"]
        }
        def "axis" (prepend specializes = </__class/baseAxis>)
        {
            token axis = "Z"
            color3f[] primvars:displayColor = [(0, 0, 0.8)]

            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 2)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }
    }

    def Xform "xyPlane"
    {
        def "plane" (prepend specializes = </__class/basePlane>)
        {
            token axis = "Z"
            color3f[] primvars:displayColor = [(1, 1, 0)]

            float3 xformOp:translate = (0.8, 0.8, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }
    def Xform "yzPlane"
    {
        def "plane" (prepend specializes = </__class/basePlane>)
        {
            token axis = "X"
            color3f[] primvars:displayColor = [(0, 1, 1)]

            float3 xformOp:translate = (0, 0.8, 0.8)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }
    def Xform "zxPlane"
    {
        def "plane" (prepend specializes = </__class/basePlane>)
        {
            token axis = "Y"
            color3f[] primvars:displayColor = [(1, 0, 1)]

            float3 xformOp:translate = (0.8, 0, 0.8)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }
}
